/** THIS IS RECURSIVE SOLUTION;
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
  vector<int>ans;
  void helpercode(TreeNode*node){
      if(node==NULL) return;
      if(node->left!=NULL){
          helpercode(node->left);
      }
      if(node->right!=NULL){
          helpercode(node->right);
      }
      ans.push_back(node->val);
  }
    vector<int> postorderTraversal(TreeNode* root) {
      helpercode(root);
      return ans;
        
    }
};



/** THIS SOLUTION USES SINGLE STACK;
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
      vector<int>ans;
      if(root==NULL) return ans;
      stack<TreeNode*> st;
      st.push(root);
      while(!st.empty()){
        root=st.top();
         ans.push_back(root->val);
        st.pop();
       
      if(root->left!=NULL){
        st.push(root->left);
      }
      if(root->right!=NULL){
        st.push(root->right);
      }
      
      
      }
      reverse(ans.begin(), ans.end());
      return ans;
        
    }
};*/
